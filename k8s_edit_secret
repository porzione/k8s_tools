#!/usr/bin/env ruby
# frozen_string_literal: true

require 'pp'
require 'optparse'
require 'ostruct'
require 'open3'
require 'yaml'
require 'base64'
require 'tempfile'
require 'digest'

# edit kubernetes secret
class EditSecret
  def initialize
    @opt = OpenStruct.new
    OptionParser.new do |opts|
      opts.on('-s S', 'Secret name') { |s| @opt.secret_file_or_name = s }
      opts.on('--dry', 'Dry run')    { @opt.dry = true }
      opts.on('-D', 'Debug')         { @opt.debug = true }
    end.parse!
    abort 'give me secret name' unless @opt.secret_file_or_name
    @editor = ENV['EDITOR'] || ENV['VISUAL'] || 'xdg-open'
    @temp = Tempfile.new
    @sha256 = Digest::SHA256.new
    @is_file = false
  end

  def cmd(command)
    puts command if @opt.debug
    out, err, st = Open3.capture3 command
    abort "#{out} #{err} #{st.to_i}" unless st.success?
    warn err if err&.size&.positive?
    out
  end

  def go
    fetch
    edit
    apply
  ensure
    @temp.unlink
  end

  def fetch
    yml = if File.exist? @opt.secret_file_or_name
        @is_file = true
        File.read @opt.secret_file_or_name
      else
        cmd = "kubectl get secret #{@opt.secret_file_or_name} -o yaml"
        out, err, st = Open3.capture3 cmd
        abort "ERR: #{err} #{st}" unless st.success?
        out
      end
    data = YAML.safe_load yml
    new_data = data['data'].transform_values { |v| Base64.strict_decode64 v }
    data['data'] = new_data
    new_yml = YAML.dump data
    @digest = @sha256.digest new_yml
    @temp.write new_yml
    @temp.close
  end

  def edit
    system %(#{@editor} "#{@temp.path}")
  end

  def apply
    t_yml = File.read @temp.path
    if @digest == @sha256.digest(t_yml)
      puts 'Apply cancelled, no changes made'
      return
    end
    data = YAML.safe_load t_yml
    new_data = data['data'].transform_values { |v| Base64.strict_encode64 v }
    data['data'] = new_data
    yml = YAML.dump data
    puts "YAML:\n#{yml}" if @opt.debug
    if @is_file
      File.write @opt.secret_file_or_name, yml
    else
      dry_run = @opt.dry ? 'server' : 'none'
      cmd = "kubectl apply --dry-run='#{dry_run}' -f -"
      out, err, st = Open3.capture3 cmd, stdin_data: yml
      if st.success?
        puts out
      else
        abort "ERR: #{err} #{st}"
      end
    end
  end
end

EditSecret.new.go
