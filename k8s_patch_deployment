#!/usr/bin/env ruby
# frozen_string_literal: true

require 'pp'
require 'yaml'
require 'open3'
require 'optparse'
require 'ostruct'

# patch kubernetes deployment
class PatchK8S
  def initialize
    @opt = OpenStruct.new
    OptionParser.new do |opts|
      opts.on('-i IMG', 'Image url') { |i| @opt.img = i }
      opts.on('--dry', 'Dry run')    { @opt.dry = true }
      opts.on('-D', 'Debug')         { @opt.debug = true }
    end.parse!
    abort 'give me deployment(s) file|name' if (@ymls = ARGV).empty?
  end

  def cmd(command)
    warn command if @opt.debug
    out, err, st = Open3.capture3 command
    abort "#{out} #{err} #{st.to_i}" unless st.success?
    warn err if err&.size&.positive?
    out
  end

  def go
    @ymls.each do |yml|
      data = parse yml
      img = @opt.img || fetch_img(data)
      warn "image: #{img}" if @opt.debug
      apply(data, img)
    end
  end

  def parse(yml)
    raw = if File.exist?(yml)
            File.read yml
          else
            cmd "kubectl get deployment #{yml} -o yaml"
          end
    data = YAML.safe_load raw
    abort 'Bad yaml' unless data.key?('kind')
    abort "Bad kind: #{data['kind']}" unless data['kind'] == 'Deployment'
    abort('there must be only one container') unless data['spec']['template']['spec']['containers'].size == 1
    data.delete 'status'
    warn data if @opt.debug
    data
  end

  def fetch_img(data)
    yml = cmd format(
      'kubectl get deployment %<name>s -o yaml -n %<ns>s',
      name: data['metadata']['name'],
      ns:   data['metadata']['namespace']
    )
    YAML.safe_load(yml)['spec']['template']['spec']['containers'][0]['image']
  end

  def apply(data, img)
    data['spec']['template']['spec']['containers'][0]['image'] = img
    data['metadata']['annotations']['patchTimestamp'] = Time.now.utc.strftime('%FT%T%:z')
    dry_run = @opt.dry ? 'server' : 'none'
    cmd = "kubectl apply --dry-run='#{dry_run}' -f -"
    yml = YAML.dump data
    warn "YAML:\n#{yml}" if @opt.debug
    out, err, st = Open3.capture3 cmd, stdin_data: yml
    if st.success?
      puts out
    else
      abort "ERR: #{err} #{st}"
    end
  end
end

PatchK8S.new.go
